/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Homepage API
 * API documentation for the Homepage project
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CreateGameDto,
  GameStateDto,
  GetChessGameId404,
  GetChessGameId500,
  GetChessInviteInviteCode404,
  GetChessInviteInviteCode500,
  JoinGameDto,
  PostChessCreate400,
  PostChessCreate500,
  PostChessGameIdAbandon400,
  PostChessGameIdAbandonBody,
  PostChessGameIdMove400,
  PostChessGameIdMoveBody,
  PostChessJoin400
} from '.././model';





/**
 * @summary Create a new chess game
 */
export const postChessCreate = (
    createGameDto: CreateGameDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GameStateDto>> => {
    
    
    return axios.post(
      `http://localhost:8080/api/chess/create`,
      createGameDto,options
    );
  }



export const getPostChessCreateMutationOptions = <TError = AxiosError<PostChessCreate400 | PostChessCreate500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChessCreate>>, TError,{data: CreateGameDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postChessCreate>>, TError,{data: CreateGameDto}, TContext> => {

const mutationKey = ['postChessCreate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postChessCreate>>, {data: CreateGameDto}> = (props) => {
          const {data} = props ?? {};

          return  postChessCreate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostChessCreateMutationResult = NonNullable<Awaited<ReturnType<typeof postChessCreate>>>
    export type PostChessCreateMutationBody = CreateGameDto
    export type PostChessCreateMutationError = AxiosError<PostChessCreate400 | PostChessCreate500>

    /**
 * @summary Create a new chess game
 */
export const usePostChessCreate = <TError = AxiosError<PostChessCreate400 | PostChessCreate500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChessCreate>>, TError,{data: CreateGameDto}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postChessCreate>>,
        TError,
        {data: CreateGameDto},
        TContext
      > => {

      const mutationOptions = getPostChessCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Join an existing game by invite code
 */
export const postChessJoin = (
    joinGameDto: JoinGameDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GameStateDto>> => {
    
    
    return axios.post(
      `http://localhost:8080/api/chess/join`,
      joinGameDto,options
    );
  }



export const getPostChessJoinMutationOptions = <TError = AxiosError<PostChessJoin400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChessJoin>>, TError,{data: JoinGameDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postChessJoin>>, TError,{data: JoinGameDto}, TContext> => {

const mutationKey = ['postChessJoin'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postChessJoin>>, {data: JoinGameDto}> = (props) => {
          const {data} = props ?? {};

          return  postChessJoin(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostChessJoinMutationResult = NonNullable<Awaited<ReturnType<typeof postChessJoin>>>
    export type PostChessJoinMutationBody = JoinGameDto
    export type PostChessJoinMutationError = AxiosError<PostChessJoin400>

    /**
 * @summary Join an existing game by invite code
 */
export const usePostChessJoin = <TError = AxiosError<PostChessJoin400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChessJoin>>, TError,{data: JoinGameDto}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postChessJoin>>,
        TError,
        {data: JoinGameDto},
        TContext
      > => {

      const mutationOptions = getPostChessJoinMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get game details using an invite code
 */
export const getChessInviteInviteCode = (
    inviteCode: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GameStateDto>> => {
    
    
    return axios.get(
      `http://localhost:8080/api/chess/invite/${inviteCode}`,options
    );
  }


export const getGetChessInviteInviteCodeQueryKey = (inviteCode?: string,) => {
    return [`http://localhost:8080/api/chess/invite/${inviteCode}`] as const;
    }

    
export const getGetChessInviteInviteCodeQueryOptions = <TData = Awaited<ReturnType<typeof getChessInviteInviteCode>>, TError = AxiosError<GetChessInviteInviteCode404 | GetChessInviteInviteCode500>>(inviteCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChessInviteInviteCode>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetChessInviteInviteCodeQueryKey(inviteCode);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getChessInviteInviteCode>>> = ({ signal }) => getChessInviteInviteCode(inviteCode, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(inviteCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getChessInviteInviteCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetChessInviteInviteCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getChessInviteInviteCode>>>
export type GetChessInviteInviteCodeQueryError = AxiosError<GetChessInviteInviteCode404 | GetChessInviteInviteCode500>


export function useGetChessInviteInviteCode<TData = Awaited<ReturnType<typeof getChessInviteInviteCode>>, TError = AxiosError<GetChessInviteInviteCode404 | GetChessInviteInviteCode500>>(
 inviteCode: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChessInviteInviteCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChessInviteInviteCode>>,
          TError,
          Awaited<ReturnType<typeof getChessInviteInviteCode>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetChessInviteInviteCode<TData = Awaited<ReturnType<typeof getChessInviteInviteCode>>, TError = AxiosError<GetChessInviteInviteCode404 | GetChessInviteInviteCode500>>(
 inviteCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChessInviteInviteCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChessInviteInviteCode>>,
          TError,
          Awaited<ReturnType<typeof getChessInviteInviteCode>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetChessInviteInviteCode<TData = Awaited<ReturnType<typeof getChessInviteInviteCode>>, TError = AxiosError<GetChessInviteInviteCode404 | GetChessInviteInviteCode500>>(
 inviteCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChessInviteInviteCode>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get game details using an invite code
 */

export function useGetChessInviteInviteCode<TData = Awaited<ReturnType<typeof getChessInviteInviteCode>>, TError = AxiosError<GetChessInviteInviteCode404 | GetChessInviteInviteCode500>>(
 inviteCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChessInviteInviteCode>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetChessInviteInviteCodeQueryOptions(inviteCode,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get game details by game ID
 */
export const getChessGameId = (
    gameId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GameStateDto>> => {
    
    
    return axios.get(
      `http://localhost:8080/api/chess/${gameId}`,options
    );
  }


export const getGetChessGameIdQueryKey = (gameId?: string,) => {
    return [`http://localhost:8080/api/chess/${gameId}`] as const;
    }

    
export const getGetChessGameIdQueryOptions = <TData = Awaited<ReturnType<typeof getChessGameId>>, TError = AxiosError<GetChessGameId404 | GetChessGameId500>>(gameId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChessGameId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetChessGameIdQueryKey(gameId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getChessGameId>>> = ({ signal }) => getChessGameId(gameId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(gameId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getChessGameId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetChessGameIdQueryResult = NonNullable<Awaited<ReturnType<typeof getChessGameId>>>
export type GetChessGameIdQueryError = AxiosError<GetChessGameId404 | GetChessGameId500>


export function useGetChessGameId<TData = Awaited<ReturnType<typeof getChessGameId>>, TError = AxiosError<GetChessGameId404 | GetChessGameId500>>(
 gameId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChessGameId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChessGameId>>,
          TError,
          Awaited<ReturnType<typeof getChessGameId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetChessGameId<TData = Awaited<ReturnType<typeof getChessGameId>>, TError = AxiosError<GetChessGameId404 | GetChessGameId500>>(
 gameId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChessGameId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChessGameId>>,
          TError,
          Awaited<ReturnType<typeof getChessGameId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetChessGameId<TData = Awaited<ReturnType<typeof getChessGameId>>, TError = AxiosError<GetChessGameId404 | GetChessGameId500>>(
 gameId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChessGameId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get game details by game ID
 */

export function useGetChessGameId<TData = Awaited<ReturnType<typeof getChessGameId>>, TError = AxiosError<GetChessGameId404 | GetChessGameId500>>(
 gameId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChessGameId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetChessGameIdQueryOptions(gameId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Make a move in a game
 */
export const postChessGameIdMove = (
    gameId: string,
    postChessGameIdMoveBody: PostChessGameIdMoveBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GameStateDto>> => {
    
    
    return axios.post(
      `http://localhost:8080/api/chess/${gameId}/move`,
      postChessGameIdMoveBody,options
    );
  }



export const getPostChessGameIdMoveMutationOptions = <TError = AxiosError<PostChessGameIdMove400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChessGameIdMove>>, TError,{gameId: string;data: PostChessGameIdMoveBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postChessGameIdMove>>, TError,{gameId: string;data: PostChessGameIdMoveBody}, TContext> => {

const mutationKey = ['postChessGameIdMove'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postChessGameIdMove>>, {gameId: string;data: PostChessGameIdMoveBody}> = (props) => {
          const {gameId,data} = props ?? {};

          return  postChessGameIdMove(gameId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostChessGameIdMoveMutationResult = NonNullable<Awaited<ReturnType<typeof postChessGameIdMove>>>
    export type PostChessGameIdMoveMutationBody = PostChessGameIdMoveBody
    export type PostChessGameIdMoveMutationError = AxiosError<PostChessGameIdMove400>

    /**
 * @summary Make a move in a game
 */
export const usePostChessGameIdMove = <TError = AxiosError<PostChessGameIdMove400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChessGameIdMove>>, TError,{gameId: string;data: PostChessGameIdMoveBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postChessGameIdMove>>,
        TError,
        {gameId: string;data: PostChessGameIdMoveBody},
        TContext
      > => {

      const mutationOptions = getPostChessGameIdMoveMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Abandon a game
 */
export const postChessGameIdAbandon = (
    gameId: string,
    postChessGameIdAbandonBody: PostChessGameIdAbandonBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<null>> => {
    
    
    return axios.post(
      `http://localhost:8080/api/chess/${gameId}/abandon`,
      postChessGameIdAbandonBody,options
    );
  }



export const getPostChessGameIdAbandonMutationOptions = <TError = AxiosError<PostChessGameIdAbandon400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChessGameIdAbandon>>, TError,{gameId: string;data: PostChessGameIdAbandonBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postChessGameIdAbandon>>, TError,{gameId: string;data: PostChessGameIdAbandonBody}, TContext> => {

const mutationKey = ['postChessGameIdAbandon'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postChessGameIdAbandon>>, {gameId: string;data: PostChessGameIdAbandonBody}> = (props) => {
          const {gameId,data} = props ?? {};

          return  postChessGameIdAbandon(gameId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostChessGameIdAbandonMutationResult = NonNullable<Awaited<ReturnType<typeof postChessGameIdAbandon>>>
    export type PostChessGameIdAbandonMutationBody = PostChessGameIdAbandonBody
    export type PostChessGameIdAbandonMutationError = AxiosError<PostChessGameIdAbandon400>

    /**
 * @summary Abandon a game
 */
export const usePostChessGameIdAbandon = <TError = AxiosError<PostChessGameIdAbandon400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChessGameIdAbandon>>, TError,{gameId: string;data: PostChessGameIdAbandonBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postChessGameIdAbandon>>,
        TError,
        {gameId: string;data: PostChessGameIdAbandonBody},
        TContext
      > => {

      const mutationOptions = getPostChessGameIdAbandonMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    